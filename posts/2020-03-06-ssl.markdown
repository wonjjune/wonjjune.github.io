
## ssl

### https 의 암호화 방식
* 통신 내용을 대칭키로 암호화 하고 그 대칭키를 비대칭키로 암호화 하는 방식으로 비대칭키는 리소스가 많이 소요되므로 전송하는 데이터는 비교적 부하가 적은 대칭키로 암호화 한 후 그 키를 비대칭키로 암호화한다.

### ssl 인증서
* 인증서의 기본 역할은 공개키를 클라이언트에게 제공하는 것이다.
* ca(certificate authority)는 인증기관을 뜻하며 접속한 서버가 정상적인 서버가 맞는지 확인하여 맞다면 인증서를 제공해주는 역할을 한다.
* 브라우저는 내부적으로 CA목록을 가지고 있어 서버를 확인하는것이 가능하다.
* 공식 인증서같은 경우에는 브라우저에 신뢰 CA로 이미 등록이 되어있어 ca 파일이 필요하지 않지만 개인이 개발환경에서 셀프 서명으로 만든 인증서의 경우에는 최상위 인증 기관이라는 뜻의 rootCA 파일이 필요하다.

### ssl 인증서 발급 과정
1. 개인키, 공개키 생성
2. CSR(인증 요청서) 생성
3. CRT(인증서) 생성

### 구성 방법
* 일반적으로 어플리케이션 서버 앞단에 프록시 서버를 두어 그 서버에서 ssl 을 적용하는 방법으로 추후 인증서 갱신에 대한 관리나 유지 보수 측면에서 이점이 있고 어플리케이션 서버의 직접적인 접촉을 피함으로써 보안적인 측면에서도 장점을 가진다.

* front - api 서버 구성 시 프록시를 두지 않고 구성시에는 https - https 요청할 수 있도록 둘다 적용 해주어야 하며 한곳만 할 시 암호화 적용 의미가 없어질 뿐더러  mix content 에러가발생한다.

* spa 웹앱에서는 front 와 api 서버 각각 구성하면 된다. 모두 브라우저에서 직접 request 요청한다.

### ssl 구성시 주의사항
* ssl 이 적용된 web 에서 적용되지 않은 http 서버로 request 시 mix context error가 발생한다.
* 프론트 서버에서 프록시 설정을 하여 프론트 서버로 request 하면 api 서버로 요청이 가도록 설정을 하면 문제 생기지 않는다.
* 본래 cross domain 요청 시 조건을 만족해야 통신이 일어날수 있다.
* ie 는 더욱 엄격한 제한으로 인해 에러 발생하여 request  불가능하다.